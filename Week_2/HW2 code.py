# -*- coding: utf-8 -*-
"""歡迎使用 Colab

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/notebooks/intro.ipynb
"""

import numpy as np
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import matplotlib.pyplot as plt

def function(x):
    return 1 / (1 + 25 * x**2)

X= np.random.uniform(-1, 1, 2400)
y= function(X)

# 訓練：測試=5:1
X_train, X_val = X[:2000], X[2000:]
y_train, y_val = y[:2000], y[2000:]

model = keras.Sequential([
    # 輸入層
    layers.Input(shape=(1,)),
    # 隱藏層 1
    layers.Dense(64, activation='relu'),
    # 隱藏層 2
    layers.Dense(64, activation='relu'),
    # 輸出層
    layers.Dense(1)
])

model.summary()
model.compile(optimizer='adam',loss='mean_squared_error')

history = model.fit(
    X_train,
    y_train,
    epochs=1000,
    batch_size=64,
    validation_data=(X_val, y_val),
    verbose=1
)

X_test = np.linspace(-1, 1, 500)
y_true = function(X_test)

# 預測
y_pred = model.predict(X_test)

# 計算最終MSE
final_mse = np.mean((y_true - y_pred.flatten())**2)
print(f"Mean Squared Error on Test Data: {final_mse:.6f}")

plt.figure(figsize=(12, 6))
plt.plot(X_test, y_true, 'r-', label='True Runge Function', linewidth=2)
plt.plot(X_test, y_pred, 'b--', label='Neural Network Prediction', linewidth=2)
plt.title('Runge Function Approximation using Neural Network')
plt.xlabel('x')
plt.ylabel('f(x)')
plt.legend()
plt.grid(True)
plt.show()


plt.figure(figsize=(12, 6))
plt.plot(history.history['loss'], label='Training Loss')
plt.plot(history.history['val_loss'], label='Validation Loss')
plt.title('Training and Validation Loss Curves')
plt.xlabel('Epoch')
plt.ylabel('Mean Squared Error (Loss)')
plt.legend()
plt.grid(True)
plt.show()